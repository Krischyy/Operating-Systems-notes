Задача 1:
Реализирайте команда swap, разменяща съдържанието на два файла, подадени като входни параметри.

Задача 2:
Реализирайте команда cp, работеща с два аргумента, подадени като входни параметри. 

Задача 3:
Реализирайте команда cat, работеща с произволен брой подадени входни параметри.




















Решение на задача 1:
//Реализирайте команда swap, разменяща
//съдържанието на два файла, подадени като
//входни параметри.
//Приемаме, че двата файла имат еднакъв брой символи. 

//Примерно решение, когато 2та файла имат различен размер, е следното:
//Проверяваме (обхождаме и в променлива брой символите) кой файл има по-голямо съдържание и него преливаме върху файла с по-малко такова.

#include <fcntl.h>      //библиотека, съдържаща реализиция на функции open, read, write, ..
#include <stdlib.h>     //библиотека, съдържаща реализация на функция exit
#include <stdio.h>      //библиотека, съдържаща реализация на фунцкия printf

main (int argc, char* argv[]){
        int fd1, fd2, fd3; //третият файлов дескриптор асоциираме с третия, помощен файл.
        char c[4096];   //променлива, чрез която ще обхождамe съдържанието на файлoвете поблоково (четене и писане от/в файл/ове е препоръчително да се извършва на порции (на блокове от данни, а не символ по символ). Така става по-ефективно.)
        //пп: в задачата за реализация на команда wc, нямаше как да избегнем посимволното обхождане.

        ssize_t read_size;      // Променлива, чрез която ще следим дали не настъпва грешка повреме на обхождането на съдържанието на файловете.

        /*
          проверка дали сa подадени точно два входни параметъра
        */
        if (argc != 3){
                write(2,"Йоу, wrong number of arguments!\n", 32);
                exit(1);
        }

        /*
          Oтваряне на файлa подаден като първи входен параметър едновременно в режим на четене и писане
          и проверка дали операцията се е осъществила успешно.
        */
        if ( (fd1 = open(argv[1], O_RDWR)) == -1 ){
                write(2, "Operation open failed!", 27);
                exit(1);
        }

        if ( (fd2 = open(argv[2], O_RDWR)) == -1 ){
                write(2, "Operation open failed!", 27);
                exit(1);
        }

        //Създаване на нов помощен файл, чрез който ще си решим задачата по-лесно.
        if ( (fd3 = open("my_temp_file", O_CREAT|O_RDWR|O_TRUNC)) == -1 ){
                write(2, "Operation open failed!", 27);
                exit(1);
        }

        //проверка дали успешно сме достъпили блок от символи от съдържанието на файла.
        while( ( read_size=read(fd1, &c, sizeof(c)) ) > 0 ){
        //some debugging
        //printf("%s", c);
        //printf("%d", read_size);
                if ( write(fd3, &c, read_size) != read_size ){
                        write(2, "Error while writing occured!", 28);
                        exit(1);
                }
        }

        //Тъй като вече един път сме обходили файла подаден като първи входен параметър, трябва да се погрижим за указателя.
        lseek(fd1,0,SEEK_SET);
        while( ( read_size=read(fd2, &c, sizeof(c)) ) > 0 ){
                if ( write(fd1, &c, read_size) != read_size ){
                        write(2, "Error while writing occured!", 28);
                        exit(1);
                }
        }

        lseek(fd2, 0, SEEK_SET);
        lseek(fd3, 0, SEEK_SET);
        while( ( read_size=read(fd3, &c, sizeof(c)) ) > 0 ){
                if ( write(fd2, &c, read_size) != read_size ){
                        write(2, "Error while writing occured!", 28);
                        exit(1);
                }
        }
        close(fd1);
        close(fd2);
        close(fd3);
}


Решение на задача 2:
//Задача 2:
//Реализирайте команда cp, работеща с два аргумента, подадени като входни параметри.

#include <fcntl.h>
#include <stdlib.h>
#include <stdio.h>
main (int argc, char* argv[]){
        int fd1, fd2;
        char c;         //променлива, чрез която ще обхождаме съдържанието на файла подаден като първи входен параметър
        ssize_t read_size;      // Променлива, чрез която ще следим дали не настъпва грешка повреме на обхождането на съдържанието на файла.
        //Променливата е тип ssize_t, тъй като функцията read връща стойност тип ssize_t.

        if (argc != 3){
                write(2,"Йоу, wrong number of arguments!\n", 32);
                exit(1);
        }

        /*
          Oтваряне на файлът подаден като първи входен параметър в режим на четене
          и проверка дали операцията се е осъществила успешно.
        */
        if ( (fd1 = open(argv[1], O_RDONLY)) == -1 ){
                write(2, "Operation open failed!", 27);
                exit(1);
        }

        /*
          Oтваряне на файл в режим на писане, ако не съществува го създава, ако съществува му зануляваме съдържанието.
        */

        if ( (fd2 = open(argv[2], O_CREAT|O_WRONLY|O_TRUNC)) == -1 ){
                write(2, "Operation open failed!", 27);
                exit(1);
        }

        //каквото прочетем от първия файл го записваме във втория файл
        //проверка дали успешно сме достъпили символ от съдържанието на файла.
        while( ( read_size=read(fd1, &c, 1) ) > 0 ){
                 if ( write(fd2, &c, read_size) != read_size ){
                        write(2, "Error while writing occured!", 28);
                        exit(1);
                }
        }
        close(fd1);
        close(fd2);
}


Решение на задача 3:
//Задача 3:
//Реализирайте команда cat, работеща с произволен брой подадени входни параметри.

#include <fcntl.h>
#include <stdlib.h>
#include <stdio.h>
main (int argc, char* argv[]){
        int fd1;
        int i;
        char c;         //променлива, чрез която ще обхождам съдържанието на файла подаден като първи входен параметър
        ssize_t read_size;      // Променлива, чрез която ще следим дали не настъпва грешка повреме на обхождането на съдържанието на файла.
        //Променливата е тип ssize_t, тъй като функцията read връща стойност тип ssize_t.

        /*
          проверка дали е подаден поне един входен параметър
        */
        if (argc < 2){
                write(2,"Йоу, wrong number of arguments!\n", 32);
                exit(1);
        }

        /*
          Обхождане на входните параметри и последователното им отваряне в режим на четене
          както и последвала проверка дали операцията се е осъществила успешно.
        */
        for(i=1;i<=argc;i++){
                if ( (fd1 = open(argv[i], O_RDONLY)) == -1 ){
                        write(2, "Operation open failed!", 27);
                        exit(1);
                }

                //Обхождаме файлът, символ по символ
                //проверка дали успешно смe достъпили символ от съдържанието на файла.
                while( ( read_size=read(fd1, &c, 1) ) > 0 ){
                        if ( write(1, &c, read_size) != read_size ){
                                write(2, "Error while writing occured!", 28);
                                exit(1);
                        }
                }
                close(fd1);
        }
}
